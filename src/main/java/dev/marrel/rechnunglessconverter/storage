    /*@Path("/pdf")
    @POST
    @Produces("application/pdf")
    @Consumes(MediaType.APPLICATION_XML)
    public Response xmltopdf(String xml) throws IOException {

        ValidationResult valResult = validateInvoice(xml);


        java.nio.file.Path pdfFile;
        try {
            pdfFile = performVisualization(xml);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        return Response.ok().entity((StreamingOutput) output -> {
            try {
                Files.copy(pdfFile, output);
            } finally {
                Files.delete(pdfFile);
            }
        }).build();
    }*/




        /*@Path("/convert2thumb")
        @POST
        @Produces("image/jpeg")
        @Consumes(MediaType.APPLICATION_XML)
        public Response xmltothumbnail(String xml) throws IOException {
            java.nio.file.Path pdfFile;
            try {
                pdfFile = performVisualization(xml);
            } catch (IOException e) {
                throw new RuntimeException(e);
            }

            return Response.ok().entity((StreamingOutput) output -> {
                try {
                    PDDocument doc = Loader.loadPDF(pdfFile.toFile());
                    PDFRenderer pdfRenderer = new PDFRenderer(doc);
                    BufferedImage bffim = pdfRenderer.renderImageWithDPI(0, 300, ImageType.RGB);
                    ImageIO.write(bffim, "jpeg", output);
                } finally {
                    Files.delete(pdfFile);
                }
            }).build();
        }*/






        System.out.println("VALID: " + validationResult.isValid());

        getMetadata(xml);

        if (validationResult.isValid()) {
            try {
                pdfFile = generatePdfFile(xml);
            } catch (IOException e) {
                e.printStackTrace();
                result.put("result", RESULT_FAILED);
                ArrayNode an = result.putArray("messages");
                an.add("Internal error during conversion: " + e.getMessage());
                return Response.serverError().entity(result).build();
            }
        } else {
            return Response.status(400).build();
        }



        result.put("result", validationResult.isValid() ? RESULT_SUCCESS : RESULT_INVALID);
        result.put("archive_pdf", FileTools.fileToBase64String(pdfFile));
        ArrayNode an = result.putArray("messages");
        for(String s: validationResult.getReasons()){
            an.add(s);
        }



        return Response.ok().entity(result).build();




        private ValidationResult validateInvoice(String sourceXml) throws IOException {
        java.nio.file.Path tempXmlFile;

        tempXmlFile = Files.createTempFile("rech", ".xml");
        Files.writeString(tempXmlFile, sourceXml,
                StandardCharsets.UTF_8,
                StandardOpenOption.CREATE,
                StandardOpenOption.TRUNCATE_EXISTING);

        ValidationResult validationResult = validateInvoice(tempXmlFile);
        Files.delete(tempXmlFile);
        return validationResult;
    }

    private ValidationResult validateInvoice(java.nio.file.Path sourceXmlPath) {
        ZUGFeRDValidator zva = new ZUGFeRDValidator();
        String mustangValidationResult = zva.validate(sourceXmlPath.toAbsolutePath().toString());

        return new ValidationResult(mustangValidationResult);
    }